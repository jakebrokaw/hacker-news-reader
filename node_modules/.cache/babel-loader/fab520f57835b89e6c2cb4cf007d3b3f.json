{"ast":null,"code":"import hackerNewsApi from 'services/hackerNewsApi';\nvar NS = '@hnReader/story';\nexport var actionTypes = {\n  FETCH_STORY_IDS_REQUEST: \"\".concat(NS, \"/FETCH_STORY_IDS_REQUEST\"),\n  FETCH_STORY_IDS_SUCCESS: \"\".concat(NS, \"/FETCH_STORY_IDS_SUCCESS\"),\n  FETCH_STORY_IDS_FAILURE: \"\".concat(NS, \"/FETCH_STORY_IDS_FAILURE\"),\n  FETCH_STORIES_REQUEST: \"\".concat(NS, \"/FETCH_STORIES_REQUEST\"),\n  FETCH_STORIES_SUCCESS: \"\".concat(NS, \"/FETCH_STORIES_SUCCESS\"),\n  FETCH_STORIES_FAILURE: \"\".concat(NS, \"/FETCH_STORIES_FAILURE\")\n};\n\nvar action = function action(type, payload) {\n  return {\n    type: type,\n    payload: payload\n  };\n};\n\nvar actions = {\n  fetchStoryIds: function fetchStoryIds() {\n    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (dispatch) {\n      dispatch(action(actionTypes.FETCH_STORY_IDS_REQUEST, payload));\n      return hackerNewsApi.getNewStoryIds().then(function (storyIds) {\n        dispatch(action(actionTypes.FETCH_STORY_IDS_SUCCESS, {\n          storyIds: storyIds\n        }));\n        dispatch(actions.fetchStories({\n          storyIds: storyIds,\n          page: 0\n        }));\n        return storyIds;\n      }).catch(function (err) {\n        return dispatch(action(actionTypes.FETCH_STORY_IDS_FAILURE, err));\n      });\n    };\n  },\n  fetchStories: function fetchStories() {\n    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (dispatch) {\n      var storyIds = payload.storyIds,\n          page = payload.page;\n      dispatch(action(actionTypes.FETCH_STORIES_REQUEST, payload));\n      return hackerNewsApi.getStoriesByPage(storyIds, page).then(function (stories) {\n        return dispatch(action(actionTypes.FETCH_STORIES_SUCCESS, {\n          stories: stories\n        }));\n      }).catch(function (err) {\n        return dispatch(action(actionTypes.FETCH_STORIES_FAILURE, err));\n      });\n    };\n  }\n};\nexport default actions;","map":{"version":3,"sources":["/Users/jake/Desktop/side-projects/hacker-news-reader--doist/hacker-news-reader/src/store/story/actions.js"],"names":["hackerNewsApi","NS","actionTypes","FETCH_STORY_IDS_REQUEST","FETCH_STORY_IDS_SUCCESS","FETCH_STORY_IDS_FAILURE","FETCH_STORIES_REQUEST","FETCH_STORIES_SUCCESS","FETCH_STORIES_FAILURE","action","type","payload","actions","fetchStoryIds","dispatch","getNewStoryIds","then","storyIds","fetchStories","page","catch","err","getStoriesByPage","stories"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,wBAA1B;AAEA,IAAMC,EAAE,GAAG,iBAAX;AAEA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,uBAAuB,YAAKF,EAAL,6BADE;AAEzBG,EAAAA,uBAAuB,YAAKH,EAAL,6BAFE;AAGzBI,EAAAA,uBAAuB,YAAKJ,EAAL,6BAHE;AAIzBK,EAAAA,qBAAqB,YAAKL,EAAL,2BAJI;AAKzBM,EAAAA,qBAAqB,YAAKN,EAAL,2BALI;AAMzBO,EAAAA,qBAAqB,YAAKP,EAAL;AANI,CAApB;;AASP,IAAMQ,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOC,OAAP;AAAA,SAAoB;AAAED,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,OAAO,EAAPA;AAAR,GAApB;AAAA,CAAf;;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,aAAa,EAAE,yBAAkB;AAAA,QAAjBF,OAAiB,uEAAP,EAAO;AAC/B,WAAO,UAAAG,QAAQ,EAAI;AACjBA,MAAAA,QAAQ,CAACL,MAAM,CAACP,WAAW,CAACC,uBAAb,EAAsCQ,OAAtC,CAAP,CAAR;AAEA,aAAOX,aAAa,CACjBe,cADI,GAEJC,IAFI,CAEC,UAAAC,QAAQ,EAAI;AAChBH,QAAAA,QAAQ,CAACL,MAAM,CAACP,WAAW,CAACE,uBAAb,EAAsC;AAAEa,UAAAA,QAAQ,EAARA;AAAF,SAAtC,CAAP,CAAR;AACAH,QAAAA,QAAQ,CAACF,OAAO,CAACM,YAAR,CAAqB;AAAED,UAAAA,QAAQ,EAARA,QAAF;AAAYE,UAAAA,IAAI,EAAE;AAAlB,SAArB,CAAD,CAAR;AACA,eAAOF,QAAP;AACD,OANI,EAOJG,KAPI,CAOE,UAAAC,GAAG;AAAA,eAAIP,QAAQ,CAACL,MAAM,CAACP,WAAW,CAACG,uBAAb,EAAsCgB,GAAtC,CAAP,CAAZ;AAAA,OAPL,CAAP;AAQD,KAXD;AAYD,GAda;AAedH,EAAAA,YAAY,EAAE,wBAAkB;AAAA,QAAjBP,OAAiB,uEAAP,EAAO;AAC9B,WAAO,UAAAG,QAAQ,EAAI;AAAA,UACTG,QADS,GACUN,OADV,CACTM,QADS;AAAA,UACCE,IADD,GACUR,OADV,CACCQ,IADD;AAGjBL,MAAAA,QAAQ,CAACL,MAAM,CAACP,WAAW,CAACI,qBAAb,EAAoCK,OAApC,CAAP,CAAR;AAEA,aAAOX,aAAa,CACjBsB,gBADI,CACaL,QADb,EACuBE,IADvB,EAEJH,IAFI,CAEC,UAAAO,OAAO;AAAA,eAAIT,QAAQ,CAACL,MAAM,CAACP,WAAW,CAACK,qBAAb,EAAoC;AAAEgB,UAAAA,OAAO,EAAPA;AAAF,SAApC,CAAP,CAAZ;AAAA,OAFR,EAGJH,KAHI,CAGE,UAAAC,GAAG;AAAA,eAAIP,QAAQ,CAACL,MAAM,CAACP,WAAW,CAACM,qBAAb,EAAoCa,GAApC,CAAP,CAAZ;AAAA,OAHL,CAAP;AAKD,KAVD;AAWD;AA3Ba,CAAhB;AA8BA,eAAeT,OAAf","sourcesContent":["import hackerNewsApi from 'services/hackerNewsApi';\n\nconst NS = '@hnReader/story';\n\nexport const actionTypes = {\n  FETCH_STORY_IDS_REQUEST: `${NS}/FETCH_STORY_IDS_REQUEST`,\n  FETCH_STORY_IDS_SUCCESS: `${NS}/FETCH_STORY_IDS_SUCCESS`,\n  FETCH_STORY_IDS_FAILURE: `${NS}/FETCH_STORY_IDS_FAILURE`,\n  FETCH_STORIES_REQUEST: `${NS}/FETCH_STORIES_REQUEST`,\n  FETCH_STORIES_SUCCESS: `${NS}/FETCH_STORIES_SUCCESS`,\n  FETCH_STORIES_FAILURE: `${NS}/FETCH_STORIES_FAILURE`,\n};\n\nconst action = (type, payload) => ({ type, payload });\n\nconst actions = {\n  fetchStoryIds: (payload = {}) => {\n    return dispatch => {\n      dispatch(action(actionTypes.FETCH_STORY_IDS_REQUEST, payload));\n\n      return hackerNewsApi\n        .getNewStoryIds()\n        .then(storyIds => {\n          dispatch(action(actionTypes.FETCH_STORY_IDS_SUCCESS, { storyIds }));\n          dispatch(actions.fetchStories({ storyIds, page: 0 }));\n          return storyIds;\n        })\n        .catch(err => dispatch(action(actionTypes.FETCH_STORY_IDS_FAILURE, err )));\n    };\n  },\n  fetchStories: (payload = {}) => {\n    return dispatch => {\n      const { storyIds, page } = payload;\n\n      dispatch(action(actionTypes.FETCH_STORIES_REQUEST, payload));\n\n      return hackerNewsApi\n        .getStoriesByPage(storyIds, page)\n        .then(stories => dispatch(action(actionTypes.FETCH_STORIES_SUCCESS, { stories })))\n        .catch(err => dispatch(action(actionTypes.FETCH_STORIES_FAILURE, err)));\n\n    };\n  },\n};\n\nexport default actions;"]},"metadata":{},"sourceType":"module"}